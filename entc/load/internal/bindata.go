// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xe3\x36\x12\x7f\xb6\x3f\xc5\x6c\x80\x06\xd6\xc2\x55\x7a\x45\x51\xdc\x79\xcf\x07\x14\xed\x16\xcd\xf5\x9a\x2e\xba\xbb\x7d\x09\x82\x54\x91\x46\x31\x37\x12\xe5\x92\x74\x36\x69\x9a\xef\x7e\xe0\x0c\x49\x51\xb2\xe4\x78\xb3\x49\x5e\x62\x0d\x39\xc3\x99\x9f\xe6\x1f\xc7\x3e\x3a\x82\xef\x9b\xf5\xad\x12\x97\x2b\x03\x5f\x7f\xf5\x8f\x7f\x7d\xb9\x56\xa8\x51\x1a\xf8\x31\xcb\xf1\xa2\x69\xae\xe0\x58\xe6\x29\x7c\x57\x55\x40\x9b\x34\xd8\x75\x75\x8d\x45\x3a\x3d\x3a\x82\x77\x2b\xa1\x41\x37\x1b\x95\x23\xe4\x4d\x81\x20\x34\x54\x22\x47\xa9\xb1\x80\x8d\x2c\x50\x81\x59\x21\x7c\xb7\xce\xf2\x15\xc2\xd7\xe9\x57\x7e\x15\xca\x66\x23\x0b\x2b\x42\x48\xda\xf2\xbf\xe3\xef\x5f\x9f\xbc\x7d\x0d\xa5\xa8\xd0\xd3\x54\xd3\x18\x28\x84\xc2\xdc\x34\xea\x16\x9a\x12\x4c\x74\x9e\x51\x88\xe9\x74\xba\xce\xf2\xab\xec\x12\xa1\x6a\xb2\x62\x3a\x15\xf5\xba\x51\x06\x66\xd3\xc9\x01\xca\xbc\x29\x84\xbc\x3c\xfa\xa0\x1b\x79\x30\x9d\x1c\x94\xb5\xb1\xff\x14\x96\x15\xe6\xe6\x60\x3a\x9d\x1c\x5c\x0a\xb3\xda\x5c\xa4\x79\x53\x1f\x95\xce\xe0\x23\x94\xb4\x6d\x64\xe9\x48\xe7\x2b\xac\xb3\x23\x2c\x2e\x71\x8f\x6d\xa5\xc0\xaa\xd8\x63\x9f\x90\x05\xde\x1c\x4c\x93\xa9\x85\xe4\x2d\xd1\x40\xa1\x7b\x19\x1a\x32\x09\x28\x4d\xea\x16\xcc\x2a\x33\xf0\x31\xd3\x64\x33\x16\x50\xaa\xa6\x86\x0c\xf2\xa6\x5e\x57\xc2\x02\xaf\x51\x81\xc3\x25\x9d\x9a\xdb\x35\x7a\x91\xda\xa8\x4d\x6e\xe0\x6e\x3a\x39\xc9\x6a\x04\xf7\xa7\x8d\x12\xf2\x12\xfa\x7f\x7f\x58\xe0\x16\x07\x32\xab\x71\xde\xd4\xc2\x60\xbd\x36\xb7\x07\x7f\x4c\x27\xdf\x37\xb2\x14\x6e\xbf\x55\x2b\x7e\xee\xf2\xe6\xb4\xd2\xe5\x7e\x5d\x5c\xa2\x76\xdb\x4e\xcf\x5e\xda\xc7\x91\x93\x2d\xc6\xba\xcb\xfc\xa3\xc5\x53\x07\x66\x7a\x1c\x66\x26\xe4\x7b\xdc\xc7\x16\x65\x77\xf8\xe9\xd9\x4b\x7a\x1c\xe6\x16\xbc\xb3\xcb\xfe\x53\xd3\x5c\x45\x9a\xbf\x69\xb4\x30\xa2\x91\x03\xec\x2b\xbb\xb3\xcb\xfc\xa6\xa9\x44\x7e\xbb\x0f\xf3\x9a\x76\x76\xb9\xbf\x93\xb2\x31\x99\x65\xd0\x50\x67\xeb\x53\x7e\x65\x67\x42\x1a\x54\xd6\x9f\xee\xee\x3d\x77\xd6\xee\xec\x88\xb8\x27\xd7\x0a\xc7\x16\xa8\x73\x25\x2e\x50\x43\x06\x6b\x4f\x74\x71\xc7\x3e\xe9\x3c\x27\x70\xb4\xbe\x13\xe1\x26\xa4\x01\x38\x3a\x02\x26\x39\x7e\x82\xfe\xc8\x62\x00\x95\xd0\x26\x9d\x4e\x7e\x11\x37\x58\x1c\x93\xb1\x17\x4d\x53\x39\x0e\x91\x67\x06\x35\x88\x32\x3a\x15\x9a\x8b\x0f\x98\xb3\x7b\xd7\x96\xeb\x4b\x21\x59\x80\x90\xfe\x10\x3e\x92\x48\x20\xe2\x83\x6b\x22\xf1\x99\x6c\x2f\x3b\xc8\x76\x24\x31\xfd\x11\x81\xc4\x8c\xc3\x71\x34\x1a\x49\xe3\xa1\x74\x2c\xcb\xa6\xdd\xf6\x92\x90\x4b\xdf\xdd\xae\xb1\xb3\xe0\xd8\xad\x02\x5d\xf6\x77\x59\x7c\xd8\x03\xa7\x9b\xac\x17\x89\x6f\xc5\x5f\x91\xee\x2f\x85\x34\xdf\x7e\x33\xca\xad\xc5\x5f\xbd\xc3\x5f\xcb\x4d\xad\xc3\xb6\xd3\x33\x06\xe5\x0e\x4e\xe6\xf0\xbb\xd7\x25\xb8\x25\xda\xcd\x5d\xfe\xf7\x52\xfc\xb9\x09\x0a\x90\x5f\x0c\xfc\x39\xfe\x0d\x6d\xee\x0a\x38\x11\x55\x95\x5d\x54\xb8\x97\x00\xe9\x36\x77\x45\xfc\xba\xb6\xbe\x9d\x55\x7b\x89\x68\xdc\xe6\xae\x88\x1f\xb0\xcc\x36\x95\xd9\xcf\x8c\x82\x37\x0f\x4a\xf8\x3d\xab\x2c\x1c\x71\x4c\x8f\x4b\x38\xbf\xb6\xbb\x7b\x80\xae\x8b\xcc\xa0\xd7\xe7\x21\x40\x69\xf3\xf9\xa0\x42\xc7\x75\xbd\x31\x01\xd9\x07\x04\x09\xbf\xb9\x2b\xe3\xf7\xac\x12\x45\x66\x1a\x45\x2e\x42\x41\x3b\x2e\xe3\x3a\x6c\xee\x79\xa8\x69\x54\x76\x89\x3f\x23\x25\xce\x07\xfc\x5b\xf3\xe6\xf3\x2b\xbc\xed\xa7\xde\x38\xd7\x0e\xa6\xde\x38\xfb\xf2\x6a\x4f\x11\x94\x96\x7c\xbd\x17\x22\xda\x6f\xee\xc9\xa0\x04\x67\x83\xdb\xee\x8d\xb2\x78\xc7\x2e\x2f\x83\x36\x9f\x6f\x87\xfc\xb1\xcc\x15\xd6\xe8\xf0\x7c\xe8\xdd\xf8\xcd\xe3\xd5\x04\xc6\xea\xc9\x7e\x05\x85\xca\xf7\x76\x7e\x25\xf2\x23\xd2\x2b\xf1\x3d\x4d\x97\xe2\x81\x7e\x98\x77\x77\x5e\x7d\x80\xb7\x9f\x54\x7f\xc3\x32\x68\xbd\x9b\x55\x61\x79\xbe\xad\xf6\x6f\x58\x86\x8d\x83\xcd\x51\xcc\x3f\x9e\x50\x47\x1c\x63\x47\x36\x3d\x96\xd7\xa8\xf4\x4e\x07\x0f\x5e\x45\x3b\xfb\x7a\xff\xb9\x11\x0a\x8b\x87\xd9\x95\xdb\x39\x1e\xea\x2f\x6d\xe7\x97\x76\x83\x7f\x8f\x38\x7f\xaa\x26\x89\xfb\x8c\x6d\xa7\x66\xfa\x23\xbc\x9a\x19\x5b\xb7\x8e\x5e\x54\x80\x6a\xc7\x9b\x89\x3a\xe6\x53\x9f\x2c\xf6\x6a\x91\xfb\xbb\x87\x7a\xe2\x08\xe5\xe0\xae\x0f\x00\xcd\x28\x9d\xe0\x47\x72\xcf\x5c\x21\xb5\x71\x99\xf4\x88\x58\xa5\x18\x16\xfa\xc4\xad\xe6\xda\x34\x2a\x9d\x96\x1b\x99\x7b\xce\x19\x16\xee\x4d\xff\x10\x76\x24\xce\xe7\xef\xa6\x13\x89\xb0\x58\xc2\xa1\x7d\xbc\x9b\x4e\x6c\x48\x2e\x82\x27\x61\x91\xbe\xcb\x2e\xe7\x96\x7c\xbb\xc6\x45\x4c\xb6\xb1\x3c\x9d\x50\xe6\x88\xe9\xf6\xd9\xd2\x19\xfa\x45\xa0\xf3\xb3\x5d\x71\xfe\xbf\xf0\x2b\xee\xd9\x2e\x79\xdf\x5e\xb8\x25\xff\xcc\x6b\x65\x7b\x16\xad\x95\xfe\xac\x16\xda\x05\x2d\xb5\xcf\x76\x35\xf2\xd6\x05\xd4\xd9\x15\xce\x86\x7d\x36\x99\x4f\x27\xf7\xd3\x49\xd9\x28\x38\x9f\x43\x66\x2c\x2a\x2a\x93\x97\x68\x45\xc6\x2e\x6f\x51\x92\x18\x93\x4e\x33\x43\x86\xcf\x92\x33\x58\x42\x66\x48\x90\x28\x41\x61\x69\xa5\xb0\xb6\xaf\xe8\xf1\xc5\x12\xa4\xa8\xbc\x0c\x9b\x84\x96\xe1\x3d\x29\x2c\x13\xa6\x47\xce\xb2\x04\xde\x17\xd1\x48\xbc\x42\xb3\x51\x12\x24\xb6\x6e\xc2\x3d\xf3\xb6\x9f\x90\x3b\xb2\xa3\xf0\xc7\x21\x4f\x21\xe6\x59\x59\xf8\xe6\x38\xf6\x95\x19\x5f\x00\xe7\x80\x4a\xd9\xe7\x3b\xb2\x0e\x95\xb2\xd6\x95\x45\xfa\x5a\xa9\x59\xf2\x8a\x08\x91\x7d\x5e\x43\x51\xcd\xa1\xac\x8d\xdd\xd5\xa8\x72\xc6\xd1\x01\x5f\xfc\xb9\x80\x2f\xae\x0f\xe6\x96\x9f\x5e\xa4\x65\x4f\xc8\x34\x4d\xa8\x1d\xd2\x99\x77\x7d\x1f\x83\xc0\x40\xbe\x54\x36\xdd\x15\x4b\x99\xf7\xdd\x98\x56\x9c\x23\x53\x37\xbd\x88\x17\x88\xb2\xe5\xb3\xb4\xd4\x7a\xad\xef\x81\x17\xad\x0e\xbe\xd1\x9d\x4e\x42\x7b\xdb\xae\x7a\x8a\x5d\x75\x9d\xe2\xa2\x95\xeb\x7b\x47\x46\x8b\xce\x8e\x7b\xca\x05\x9d\xdd\xe9\x32\xdb\x9d\xa1\x69\x5c\x04\x9b\x43\x67\xd8\x0f\x06\x5a\xee\x86\x43\xdb\x2f\xd2\x7a\x85\x72\x56\x16\x69\x4b\x4d\x48\x88\xef\xac\xc2\x19\x81\xc2\xb0\xbb\x76\xa7\x55\x21\x34\x40\x96\x3b\x34\x60\x41\x85\x40\xd9\x8a\x48\x78\x5c\x4c\x96\xdb\x31\xa9\xcb\x7d\x62\x52\x97\xe4\x23\xb0\x7c\xd8\x51\x6b\xa1\xb5\x4d\xd4\x54\x5b\x84\x65\xb2\x8a\x78\xf7\x3d\x98\x5b\x59\xf6\x88\x24\xc8\xb6\x17\xbd\xc5\x12\xe8\x86\x67\x61\xb5\x37\xbf\xe4\x15\xd3\x5f\x2c\xe1\x2b\xaf\x27\xdd\x08\x97\x70\x68\x17\x88\xd9\x56\x43\xbe\x9e\xbb\x8b\x02\xd0\xbd\x03\xf2\x4c\xc2\x05\x02\xcd\xd8\xb0\x00\xd3\xd0\x9e\x4b\x94\xa8\x32\x0a\x5f\xcb\xf9\x63\xa3\x00\x6f\xb2\x7a\x5d\xe1\x1c\x64\x63\x20\x03\x1b\xd5\xd4\x7b\x57\xe2\x0a\xc1\x88\x1a\xd3\x93\xe6\x63\x4a\x5a\x9e\xcf\x7d\xe8\xda\xf2\x93\xfe\x92\x29\xbd\xca\xaa\x59\xeb\x96\x2e\x94\x23\x84\x74\x99\x76\x2e\x4f\xcb\xc8\x89\xe3\x6c\xa4\xcb\xb9\xe5\x69\x53\x12\x57\xe4\xed\x94\xc4\xe3\x04\x4a\x49\xfc\x71\x28\x25\x11\xf3\x4c\x14\x37\xf6\xce\x5c\xe0\x4d\xb7\x7e\xb1\xe8\xbb\x70\xf6\x21\x11\xac\xb6\x54\xc7\x5d\xb4\x89\xe2\x86\x9a\x64\x0a\x70\x2e\xd9\x8b\xb0\xc0\xcf\xfd\xd0\xb7\x2b\x6d\xe0\xc7\xf1\x64\x57\x3a\xd1\x74\xef\x2c\x75\x18\xba\xe9\x1f\xbf\x2d\x7a\x53\xd1\x34\x31\xb8\xb5\xfd\xd4\x40\x06\xff\x7d\xfb\xeb\x89\x65\xa6\x46\xc7\xbd\xe8\x02\xf9\x45\xd3\x16\x2b\xe0\x6d\x67\x5a\xc3\xff\x1c\x42\x9d\x43\x67\xda\x9f\x6d\xfb\x27\x77\x52\x02\xb3\x0b\x38\x3d\xbb\xb8\x35\x9c\x5e\xa3\xfc\xad\x29\xc5\x32\xaf\xc5\x8c\x67\x8b\x0e\x34\x37\x98\x62\xda\x2c\xd9\xaa\xf3\x42\xf2\xb4\x78\xe6\x66\xbc\xd4\x0d\xfc\x5a\x3a\x1d\x92\xc4\x05\xde\x23\xaa\x6f\x5b\x56\x74\x6a\x5d\x85\x86\x4f\x5e\xee\xde\x15\xc6\x61\x11\x4a\x8c\xee\x57\x98\x76\xf8\x1b\x75\xa8\xd0\x5c\xa3\x52\xa2\xc0\x30\x10\x8b\x57\xd3\xc1\x34\xe4\x90\x8a\xac\x9c\x25\x1c\x31\xfb\xe4\xa2\x8e\xa9\xec\x8c\x4f\x6f\x2b\xb7\xae\xe1\xac\xac\x44\x8a\x07\x7f\x50\x50\xe4\x29\xce\x72\x08\x61\xdc\x3b\xd9\x9e\x9a\x11\xe1\xfe\x7a\x09\xd9\x7a\x8d\xb2\x98\x39\xc2\xbc\xed\x53\xa3\x00\x9f\x25\x89\x4b\xab\x6e\x42\x1c\x1b\xe0\xe6\xcb\xcf\x69\x82\xcd\x3a\xc1\x08\xa7\x83\x33\xc3\x4f\xb7\x23\x43\x8e\xbd\x92\x71\xd6\x1a\xb4\xa6\xf7\xd2\x69\xd4\xfd\xf4\xef\xbc\x7f\x0c\x0f\xc5\x9f\xfe\x1c\xc7\xd8\xa9\x23\x3a\x71\x49\xf1\xbd\xac\x3b\x69\x91\x73\x9b\xe6\x0a\x26\xae\x51\xc2\xc5\xa6\x2c\x51\x01\x65\x43\x57\x18\xfc\x4c\x9c\x32\x5c\x4f\xc2\xec\x62\x53\xba\x74\x66\x7b\x52\x26\xce\xc7\x92\x5a\x07\x06\xd2\x30\x88\xb3\x82\xe6\xa0\x77\x03\x81\x4a\xc5\x0e\x51\x46\x41\xef\x0a\x07\xb1\x44\x8d\x70\xea\x6a\xb7\x1e\x68\x86\xb7\x45\x5b\xd9\x51\xe5\x8c\x0b\x67\xc8\x7c\xf4\x49\xbb\x79\xbb\x69\xfc\xec\x9e\xef\x7c\x71\xa6\x77\x80\xcd\x34\x38\x58\x12\xe8\xa7\xcf\x7e\x69\x20\xd8\xac\x6e\x24\xbd\x13\x5f\x9d\xac\xbb\x23\xba\x62\x88\xc4\x1c\xea\x28\x64\x58\x65\xba\xe6\x64\xb5\x6b\x8a\x86\x8b\x46\x7d\x13\x0a\xc6\x74\x32\x71\x57\xe7\x58\x1b\x97\x18\xeb\x9b\xa4\x85\x7b\x00\xd9\x6e\xe7\x66\x4f\x0f\x7e\x2b\x23\xaf\xb5\xfa\x92\xc2\x1f\x3a\xef\xb4\x6c\xdf\xe8\xc4\x76\x31\xee\xfc\xf6\x62\xd4\x8d\x66\xbb\x6d\x40\x95\x4f\xd5\x85\x94\xb1\xdd\x55\x98\x95\x2e\xe1\xd0\x7f\x66\x89\x94\x4e\x5c\xe5\xfd\x30\x27\x92\xfb\x96\x87\x88\x46\x71\x9b\x32\x89\xbe\xba\x59\x80\x98\xb7\xc2\xbd\xb3\x46\xe9\xca\xf5\x3d\xa0\x4b\x0f\xc8\x58\x91\x78\x6a\xd0\xc7\x8a\xc3\xa3\xaa\x03\x49\xdd\x55\x1f\x9e\x41\xfb\xd1\xba\xf0\x39\x85\x81\x0e\xe0\xef\x32\x63\x33\xb8\x38\x3c\xb9\xdf\xb7\xfa\xd3\x91\x5e\x7b\xfe\xd6\x35\xd2\xfd\x27\x56\xe8\x09\xfd\xd1\xab\xe1\xbe\x79\x8d\x6d\x75\x15\xea\x29\x8d\x15\x25\xf0\x41\x1d\x41\x3a\x75\xdf\x10\x47\x96\xbe\x71\xfa\xf4\x4c\xfd\x64\xbb\x06\x1a\xc4\xfa\x66\xa0\x39\x7c\xa8\x3b\xec\x96\x86\x6e\x5d\x70\xd1\xcc\x85\x81\xef\xa2\x8f\x28\x0c\x9d\x66\x73\xb4\x32\x8c\x27\xe3\x4f\xae\x0d\xc3\xa9\x76\xbf\x4c\x3b\xee\x0e\xa1\x90\x8e\xe6\x50\xff\xa2\x68\xcf\x43\xa9\x70\x0b\xf3\x41\xec\xe2\x9e\x6d\x14\xba\xb1\x68\xfe\x44\xe0\x86\x62\x75\xdf\x50\x0d\x91\xca\x5e\x1a\xbc\xb9\xcc\x2a\x1e\xb7\xde\xef\x6d\x72\xa7\x7f\x1c\xb5\x79\x3c\xac\xf7\xb7\x7a\x30\x68\xf7\x8b\xd9\x1d\xe6\x94\xc0\x13\xcc\x04\xda\x16\xad\xd5\x5b\x94\xf0\x22\x0c\x38\xe0\xef\xbf\xed\xd3\xb1\x2c\x9b\xf4\x64\x53\xa3\x12\xb9\x8b\xda\x48\xb0\x3d\x47\xce\xa1\xb9\xe2\xbe\x2f\x9e\x8d\xa4\xb3\xb2\x6a\x32\xf3\xed\x37\x6c\xed\x8b\xe6\x2a\x66\x8e\xf3\xd7\x46\xe2\xcd\x1a\x73\x83\x45\x6f\xe8\x43\xf3\xa6\x30\x6a\x5a\xf0\xac\x29\x1e\x35\xe9\x8f\xc2\xe4\x2b\x30\x7c\x3a\xa9\x6a\x9b\xa9\x57\xf6\xa4\x3c\xd3\x08\x06\xfe\xb3\x84\xf8\x47\x0e\xe6\x9f\x70\x78\x08\x06\xfe\xdd\x23\x7f\xfb\xcd\xc2\xe6\xad\xfe\x74\x87\x07\x58\x32\x19\x16\xf7\x5e\x0c\xcb\x7b\x2f\x46\x05\x6e\x5a\x89\x43\x89\xad\xcd\x2c\xf0\x51\x65\x6b\x1d\xff\x3c\xc6\xd1\x33\x59\x70\x53\xe9\x09\x35\x9a\x55\x53\xc0\x47\x61\x56\xa0\x30\xb7\x97\x77\x9b\x09\x51\xea\x8d\x42\x90\x0d\xac\x33\x29\x72\x0d\x42\x82\x6b\xfb\x85\xbc\x74\xe9\x30\xca\x64\x65\x11\xfd\x12\x00\x1c\x31\x81\xd3\xb3\xf6\xe7\x2b\xf7\x09\xcc\x5c\xd2\x8a\xc8\xfd\x89\x4a\x81\xf6\x2e\x63\xc5\x3b\x7f\x11\x25\x5c\x53\xfc\xb2\x72\xf6\x52\x70\xdd\x49\x62\x34\x64\xeb\xb8\xc4\x17\xef\xbc\x75\xac\x7c\x18\x91\xcf\xe1\x9a\xfa\xc5\xd2\x27\x30\xf2\x42\xaa\x13\xb6\x6d\xf6\xde\x55\xa4\xde\x80\x79\x0f\x5d\xee\xae\xb6\xc0\x65\xf2\xe7\x42\x19\x0f\x14\x62\x34\x99\xee\xc1\xa4\x2f\x9c\x2c\x96\xdc\xf6\xb5\xc4\xe7\x40\xb2\x63\x5f\x07\x4c\x06\x12\x5d\xb7\x39\x88\x63\xcc\xbc\x0d\xa5\x6f\xf3\xb6\xc0\xf4\x0b\x9f\x0b\x67\x77\xbc\x11\x03\xea\x57\x3c\xa4\x3c\x03\xb5\x98\xfa\x56\x34\xa2\x3f\x23\xac\xde\xd2\x01\x60\x45\x68\x82\x77\x41\x1b\x0c\xe9\x83\xcb\xd7\xde\x2d\x68\x99\xfc\xb9\xc0\xee\xba\x0e\xcf\xb8\x9d\x64\xfc\x7e\x69\xaf\xc4\xcf\x82\x1f\x9b\x33\x80\x1e\x2b\xb1\x1b\x3b\xb6\x62\x0b\x39\x6e\x0a\xb6\x90\x63\xf2\xe7\x22\xd7\xe9\x79\x22\x87\x64\xba\x77\x47\xfb\x44\xde\xc8\xcd\x4a\x4b\x7c\x46\x28\xd9\xbe\x01\x28\x57\xae\x49\xda\x05\xa5\x53\xbf\x0f\xa5\xeb\x36\xb6\xb0\x74\xf4\xcf\x05\xb3\xdb\x4d\x45\x68\xba\x85\x84\x7c\xd3\x1d\x66\xe1\x74\x1d\x51\x4b\x7d\x46\x3c\xdd\xb1\x03\x80\xae\x7d\x0f\xb6\x0b\x51\x6f\xc2\xbc\xd3\x80\x85\xd9\x8f\x81\x78\xfa\x93\x74\x9e\xe8\xc6\xd1\x28\x30\xe9\xcf\x42\x16\xb3\x04\x96\xcb\xb0\xfe\xc6\x50\xa7\x36\x31\xb0\x04\x93\xbe\xae\xb0\x9e\x75\x5a\x09\x33\xbd\x9f\xfe\x3f\x00\x00\xff\xff\xbc\x6d\x1a\x2a\x65\x2f\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12133, mode: os.FileMode(511), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
