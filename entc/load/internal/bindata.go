// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\x5e\x7d\x8a\x89\x81\x1a\x52\xb0\xd5\xf6\x8a\xa2\xb8\xdb\xdc\x1e\x50\xb4\x29\xea\xeb\xd5\x0d\x9a\xa4\x2f\x41\x90\xca\xd2\x68\x97\xb1\x44\x6e\x49\xae\x63\xd7\xf5\x77\x3f\x70\x86\x94\x28\xad\x76\x9d\x7f\xf6\x4b\xa4\xe1\x0c\x67\xe6\xc7\xe1\xf0\x27\x6e\x16\x0b\xf8\x5e\x6d\x6f\xb4\x58\x6f\x2c\x7c\xfd\xd5\x3f\xfe\xf5\xe5\x56\xa3\x41\x69\xe1\xc7\xa2\xc4\x0b\xa5\x2e\xe1\x4c\x96\x39\x7c\xd7\x34\x40\x4a\x06\xdc\xb8\xbe\xc2\x2a\x4f\x16\x0b\x78\xb1\x11\x06\x8c\xda\xe9\x12\xa1\x54\x15\x82\x30\xd0\x88\x12\xa5\xc1\x0a\x76\xb2\x42\x0d\x76\x83\xf0\xdd\xb6\x28\x37\x08\x5f\xe7\x5f\x85\x51\xa8\xd5\x4e\x56\x6e\x0a\x21\x49\xe5\x7f\x67\xdf\x3f\x3d\x7f\xfe\x14\x6a\xd1\x60\x90\x69\xa5\x2c\x54\x42\x63\x69\x95\xbe\x01\x55\x83\x8d\xfc\x59\x8d\x98\x27\xc9\xb6\x28\x2f\x8b\x35\x42\xa3\x8a\x2a\x49\x44\xbb\x55\xda\x42\x9a\xcc\x4e\x50\x96\xaa\x12\x72\xbd\x78\x6b\x94\x3c\x49\x66\x27\x75\x6b\xdd\x3f\x1a\xeb\x06\x4b\x7b\x92\x24\xb3\x93\xb5\xb0\x9b\xdd\x45\x5e\xaa\x76\x51\xfb\x84\x85\x2c\x77\x17\x85\x55\x7a\x81\x92\xf4\xef\xd3\x59\x98\x72\x83\x6d\xb1\xc0\x6a\x8d\x1f\xa2\x5f\x0b\x6c\xaa\x0f\x31\x10\xb2\xc2\xeb\x93\x24\x4b\x1c\x6c\xcf\x49\x06\x1a\xfd\x82\x19\x28\x24\xa0\xb4\xb9\x1f\xb0\x9b\xc2\xc2\xbb\xc2\x10\x2e\x58\x41\xad\x55\x0b\x05\x94\xaa\xdd\x36\xc2\x2d\x8e\x41\x0d\x1e\xbb\x3c\xb1\x37\x5b\x0c\x53\x1a\xab\x77\xa5\x85\xdb\x64\x76\x5e\xb4\x08\x00\x4e\x22\xe4\x1a\xe8\xef\x0f\x87\xe6\xf2\x44\x16\x2d\xce\x55\x2b\x2c\xb6\x5b\x7b\x73\xf2\x47\x32\xfb\x5e\xc9\x5a\xac\x81\x62\x08\xcf\x5e\xb9\xa4\xd7\xa1\xfa\xd3\x6a\x8d\x06\x00\x5e\xbd\x7e\xec\x1e\xe3\xb9\x1d\x90\x66\xa8\xfd\xa3\xc3\xca\x90\x36\x3d\x46\xda\x04\xe3\x48\xfd\xcc\x21\x85\xc6\xa9\xd3\x63\xa4\x2e\x78\x68\xa8\xff\x93\x52\x97\x3e\x98\x67\xca\x08\x2b\x94\x0c\xfa\x1b\x37\x34\xd4\x7e\xa6\x1a\x51\xde\x00\x5c\x28\xd5\x00\x0c\x60\xd9\xd2\xd0\x40\xfd\x8e\x96\xab\x9b\xb6\x42\x53\x6a\x71\x81\x06\x0a\xa0\xd0\x61\x1b\x86\x7c\xd5\xf3\x6a\xfb\x35\xe9\xec\xfa\x55\xe9\x32\x02\x10\xd2\x02\x2c\x16\xc0\x98\x50\x6a\x61\x16\x9e\xbb\x11\xc6\xe6\xc9\xec\x17\x71\x8d\xd5\x99\x74\x26\x14\xf4\x62\x01\x67\xb2\x12\x65\x61\xd1\x80\xa8\x23\x03\x57\x31\xad\xd3\xfe\x52\x48\x36\x14\xf2\xcc\xcf\xcb\xbe\x48\x34\xf4\xd5\x92\x88\x7d\x71\xba\x1c\xd0\x7e\x71\xb2\xfc\x23\x6a\x93\x0d\xf7\x4b\x93\xff\xe2\x02\xbd\xa7\x4c\xcf\x64\xad\x7a\xb5\xc7\x94\x75\xfe\xe2\x66\x8b\x7e\xc0\x1b\x3a\xa7\x43\xc3\x17\x45\xec\xe0\xa0\x47\x5b\x8c\x0a\xfd\xb9\xf8\x2b\x8a\xf4\xb1\x90\xf6\xdb\x6f\x26\xec\x8c\xf8\x6b\xe4\xf0\xa9\xdc\xb5\xa6\x53\x7b\xf5\x7a\xec\x32\xec\x16\xa7\x36\xb4\x7c\x29\xc5\x9f\xbb\xce\x69\x5c\xa6\x03\xcb\x1d\xa9\x0d\x4d\xcf\x45\xd3\x14\x17\x0d\xde\x63\x2a\xbd\xda\xd0\xf8\xd7\xad\x2b\xd5\xa2\xb9\xc7\x58\x79\xb5\xa1\xf1\x0f\x58\x17\xbb\xc6\xde\x17\x74\xc5\x6a\x93\xb6\xbf\x17\x8d\x4b\x5b\x48\x8b\xda\x75\xd2\xdb\xbb\x49\xdb\x37\x57\x4e\x6f\x04\xd9\xb6\x2a\x2c\x86\x18\x0e\x43\x46\x6a\x6f\x26\x83\x38\x6b\xdb\x9d\xed\xb0\x3b\x38\x85\x08\x6a\x43\xeb\xdf\x8b\x46\x54\xae\xe3\xd3\x92\xd3\x66\x9b\xb2\xbe\xea\xd4\x46\x55\x66\x95\x2e\xd6\xf8\x33\xde\xc0\xb1\xea\x34\xac\xf6\xe6\x12\x6f\xc6\x3d\xcd\xf7\x19\xfa\x7b\x3c\x7c\x8d\xfb\x1b\xcb\x47\xce\x51\x3a\xf1\xd5\x3d\x99\x9b\xa0\x36\xde\x91\xa5\xc6\x16\x7d\xc6\x87\x71\x0b\x6a\x23\xdf\xd4\x2d\xdd\x06\x76\xba\x6d\xb1\x7d\xc5\xc9\x87\xed\x12\x7c\x93\xda\x9b\xbd\x6d\xcd\xed\x8a\x4e\xa0\xfd\x6e\x45\xe2\x8f\x68\x56\x64\x37\xd9\xab\xf6\x16\xe6\x60\x9f\x0a\x19\x1d\x31\x3a\xda\xa3\x0e\x1a\x8d\xfb\xd3\x6f\x58\x4f\x9d\xf3\xb1\x8d\xc6\xfa\xcd\x7e\x84\xbf\x61\x1d\xf4\xfa\x23\x7c\xcf\xf0\x60\x67\xda\x5b\xe8\x23\x5d\xe9\x4c\x5e\xa1\x36\x78\xcc\x4c\xb0\xca\x38\xc4\x3f\x77\x42\x63\x75\xc4\x4e\x7b\x95\x83\xdb\xe9\xb1\xa3\x23\x79\x24\xb8\x67\x2b\x71\x45\xf1\x99\xb9\x5f\x52\x2c\xff\x88\x9a\x62\xc3\xbe\xa8\xa6\x90\x3c\x82\x60\xa0\x5b\xf1\x49\x72\x3f\xdd\x9a\xd0\x9e\xa2\x5b\x11\x38\x5d\x09\xbd\x17\x4a\xe7\xf8\x8e\x2a\xa7\xd4\x48\x54\xa4\x90\x01\x11\x17\x14\xc3\x42\x4f\xcc\x9a\xb6\x56\xe9\x3c\xa9\x77\xb2\x0c\x96\x29\x56\x7e\x81\x7e\xe8\x34\x32\x5f\x8e\xb7\xc9\x4c\x22\x2c\x57\x70\xea\x5e\x6f\x93\x99\xdb\x1e\xcb\xb0\xfc\x58\xe5\x2f\x8a\xf5\xdc\x49\x6f\xb6\xb8\x8c\xa4\x6e\x57\x25\x33\xda\xb5\x91\xd8\xbd\x3a\x31\xe3\xbe\x0c\x62\x7e\x75\x03\xbe\x46\x97\x7e\xc0\xbf\xba\x91\x50\x85\x4b\x1e\x09\xaf\x3c\x54\x77\x7e\x68\xa8\x0e\x7e\x7a\x4c\x97\x6e\xa4\x7f\x9d\x27\xb3\xbb\x64\x26\x6a\xd0\x58\xbb\xec\xd8\xec\x09\xbd\x3e\x5a\x81\x14\x8d\xcb\x7c\x26\xd1\x89\x61\xd5\x21\xa5\xb1\xce\x58\x1e\x2d\xd7\x0a\x58\x2f\x92\xd1\xf4\x1a\xed\x4e\x4b\x90\xd8\x2f\x14\x33\xb0\xfd\x95\x62\xde\x48\x4b\xc5\x8f\x53\x6b\x45\xc6\x69\x5d\x05\xc2\x15\xaf\x56\xca\x94\x7e\x0e\xa8\xb5\x7b\xbf\xa5\xec\x50\x6b\x97\x5d\x5d\xe5\x4f\xb5\x4e\xb3\x27\x24\x88\xf2\x0b\x11\x8a\x66\x0e\x75\x6b\x9d\x96\xd2\x75\xca\xf5\x09\x5f\xfc\xb9\x84\x2f\xae\x4e\xe6\xce\x9e\x10\x75\xe6\x19\xa5\x66\x08\xb5\x53\xf2\x79\x3b\x5a\x67\x80\xce\x80\x56\xb4\x56\xc3\x11\x27\x99\x8f\x0a\x89\x47\x7c\x2d\x11\x67\x5b\xc6\x03\x24\x19\x17\x0e\x0f\xf5\xb5\x13\x58\xd7\xb2\x8f\x21\x10\xac\x64\xd6\xd1\xaa\x7e\x34\x48\xdc\xa8\xe7\x2c\xcb\x7e\xde\xc0\x62\x18\x2d\xf2\x1d\xb3\x9b\x25\xf9\x1e\xf0\x9d\x5e\xb3\x23\x31\xcb\x2e\xe7\x8e\xaf\x8c\xaa\x92\x87\x07\x85\x19\xb1\x18\x1a\x6f\x50\xa6\x75\x95\xf7\xd2\x8c\x26\x09\x3c\xa0\xf3\xd1\x49\x18\x76\x7f\xd0\xf7\x21\x74\x47\xbf\xb3\xee\x0e\xfc\x2e\x84\x4e\xd2\xed\x0d\x53\xd3\x5a\xc1\xea\xfe\x82\x69\x85\x31\xae\x65\x51\x97\x15\xce\xa8\x56\x1a\x42\x19\x9d\xcc\xdd\x5c\xae\x22\xb2\x6e\x6e\x47\xe8\x97\x2b\x20\x26\xef\xd2\x73\x0c\x3f\x7b\xc2\xf2\x47\x2b\xf8\x8a\xdc\x99\x9a\xe4\xb0\x82\x53\x37\x40\xc6\xee\x5c\xe0\x8f\x2d\x4f\x20\x81\x98\x28\x94\x85\x84\x0b\x04\xba\xb0\xc0\x0a\xac\x22\x9d\x35\x4a\xd4\x05\x6d\x23\x67\xf9\xa3\xd2\x80\xd7\x45\xbb\x6d\x70\x0e\x52\x59\xf7\xfd\xb8\x93\x25\xb1\xb4\x46\x5c\x22\x58\xd1\x62\x7e\xae\xde\xe5\x14\xe5\x9b\x79\xd8\x42\xae\x11\xe7\xbf\x14\xda\x6c\x8a\x26\xed\xcb\xc3\x6f\xa9\x08\x21\x53\xe7\x03\x22\xbd\x8a\x8a\x29\xee\x0a\xa6\x9e\x3b\x9b\xbe\x35\xf0\xd9\xb4\xdf\x1a\xf8\x23\x91\x5a\x03\x3f\x4e\xb5\x06\x32\x4e\x45\x75\xed\xbe\x8d\x2a\xbc\x1e\x76\x72\x9e\xfa\xb6\xf3\x7d\x4a\x02\x17\x2d\x9d\x68\xbe\xea\x45\x75\x4d\x64\x8d\x36\x1a\x1f\x5e\xcb\x6e\x80\xdf\xc7\x5b\xd0\x8d\xf4\x1b\x30\xae\x6b\x37\x32\x6a\xb7\x9c\xa9\xc7\xd0\x5f\x93\xf0\x6a\xd1\x4a\x45\xd7\x2e\xdd\xb7\x87\x7b\x52\x50\xc0\x7f\x9f\xff\x7a\xee\x8c\xe9\xc8\xf7\x0b\x5d\x21\x2f\x34\xa9\xb8\x09\xbc\xb1\xba\x78\x8b\xa5\xf5\xff\x78\x84\x06\x4e\x53\x13\x7c\x3b\x26\xe1\x3d\x65\x90\x5e\xc0\xab\xd7\x17\x37\x96\xdb\x5c\xd4\x47\x0d\xb5\x3a\xb6\x75\x98\xf1\xbd\xcc\x32\x5c\x31\xf0\x6b\x9a\xc5\xc7\x9d\x90\x7c\xe1\x96\xfa\x6b\x32\x3a\x0f\x7f\xad\xbd\xe7\x2c\xa3\xbd\x40\x26\x77\x71\x9f\x36\xb9\x5b\x73\xba\x1b\x08\xaa\xef\xdd\xb2\x7d\x52\x5d\xcf\x36\xe3\x96\x3d\x76\xc3\x2b\xfa\xf9\xfd\x30\x13\xea\x7c\x15\x35\x52\x51\x05\x47\x5d\x20\x9f\xc3\x97\x6b\x32\x6e\x8f\x3a\x4f\xba\x90\x6b\x24\xa2\x63\x78\x23\x72\x31\xc3\x0a\x8a\xed\x16\x65\x95\x7a\xc1\xbc\xa7\x3d\xd1\x2e\x49\xb3\xcc\xc3\xe4\xaf\xb6\xe2\x04\xfc\x4d\xd8\x43\xa6\xe0\xb6\x6e\x97\x84\x8f\xc1\xa7\x11\xee\xe1\xa2\x44\xce\x42\x90\xf1\xd6\x9f\xcc\x66\xb4\xe8\x74\x47\xf7\xf0\xb5\xc5\x97\x7b\x9f\xdf\x8f\x37\x1c\x34\x63\x93\xf9\xce\xf2\x52\xb6\x83\xde\xc2\x0d\xc2\xf0\x31\x20\xae\x50\xc2\xc5\xae\xae\x51\x03\xb5\x14\xdf\x5d\xc3\x3d\x21\xb5\x89\xd1\x0c\xe9\xc5\xae\xf6\x3d\xc1\x11\x2c\x16\xce\x0f\x75\x86\x01\x0c\x14\x61\x37\x9d\x9b\x68\x0e\xe6\x38\x10\xa8\x75\x5c\x10\x75\x5f\x0e\xc6\x77\x5f\x32\x89\x58\x5d\xee\x0f\x40\x33\xc1\xec\xf6\xa7\x76\x73\x47\xc7\x4f\x7c\xfa\x74\x5d\x87\x9e\x8c\xbf\x8a\xb4\xca\xa3\xe3\x3f\x21\xe2\x76\xe9\x01\x4b\x0d\x78\x58\x32\x18\xb7\xae\x71\x7f\x25\xd8\x5c\x6c\x34\xfb\x60\x7f\x0d\x3a\xde\x91\xdd\x15\x43\x24\xe6\xd0\x46\x5b\x86\x43\x26\xce\xee\xbe\xc3\x89\x59\x4c\xf7\xe0\xf6\xba\xeb\xbf\xc9\x6c\xe6\xbf\xc4\xe2\x68\x7c\x63\x6c\xaf\xb3\x1e\xee\x09\x64\x87\xf4\xc7\x79\xef\xea\x56\x46\x55\xeb\xe2\xa5\x80\xdf\x0e\xd6\xb4\xee\x57\x74\xe6\xa8\x80\xf7\xdf\xb3\xfc\xe1\x6e\x76\x6a\x13\xa1\x7c\x68\x2c\x14\x8c\xa3\x28\xdd\xd5\xd4\x0a\x4e\xc3\x33\xcf\x48\xed\xc4\x33\x82\xb7\x73\x12\xf9\x8b\x6f\x12\x5a\xcd\x67\xfd\x2c\xba\xd5\x5e\x82\x98\xf7\x93\x87\x62\x8d\xda\x95\x27\x0f\x60\xea\x00\xc8\xa1\x43\xe2\x73\x83\x7e\xe8\x70\xf8\xa8\xd3\x81\x66\x3d\x76\x3e\x3c\x40\xf4\x07\xcf\x85\x4f\x39\x18\xc8\x01\xff\x26\x13\xa7\xc1\x87\xc3\x67\xaf\xfb\x3e\x7e\x72\x19\xa2\xe7\x9f\x8b\xa2\xd8\x7f\xe2\x80\x3e\x63\x3d\x66\xe3\xae\x37\x6c\x79\xbe\x50\xb9\xe7\xf1\xb7\xca\x47\xf4\xbc\x01\x8f\x3a\xd8\xf4\x0e\xf7\x99\x0f\x6e\x7b\xd3\x5d\xe4\xfd\x9a\xc8\xe1\x65\xed\xce\x88\x83\xed\x21\x60\x4b\x3a\xf7\xed\xf2\x3d\xcc\x27\xb1\x8b\xe9\xc8\x41\xe8\x0e\x15\xea\x07\x02\x37\x55\x86\xef\x5b\x85\x5d\x11\x72\x61\x75\x05\x58\x17\x0d\xdf\x4e\xdd\xbd\x77\xca\x03\x6a\x74\x30\x67\xff\x13\x68\x9c\xf4\x90\x53\xbd\x47\xd6\x26\xf7\xbf\xb1\xae\x80\xa7\xf3\xba\xd3\x61\xd6\xc0\x37\x48\x19\xf4\xac\xa2\x8f\x47\xd4\xf0\xa8\xfb\xb0\x85\xbf\xff\x76\x6f\x67\xb2\x56\xf9\xf9\xae\x45\x2d\xca\x34\x1b\xf1\x19\x8a\x40\xce\x41\x5d\x32\x55\x89\xbf\x89\xf3\xb4\x6e\x54\x61\xbf\xfd\x86\xb3\x78\xa4\x2e\x63\xe3\xb8\xbf\xec\x24\x5e\x6f\xb1\xb4\x58\x8d\x3e\xf6\xe9\x9e\xa1\xbb\x62\x58\xf2\x1d\x43\x7c\xc5\x60\xde\x09\x5b\x6e\xc0\xb2\x77\x0a\xd5\x9d\xff\x4f\x9c\xa7\xb2\x30\x08\x16\xfe\xb3\x82\xf8\x87\x4b\xfb\x4f\x38\x3d\x05\x0b\xff\x1e\x89\xbf\xfd\x66\xe9\x3a\xd9\xf8\xab\x9e\x2f\x2e\x64\x36\x3d\xdd\x4b\x31\x3d\xdf\x4b\x71\x70\xc2\x5d\x3f\xe3\x54\xc3\xea\x3b\x06\xbc\xd3\xc5\xd6\xc4\xbf\x72\x7b\x79\x21\x2b\xe6\x41\x41\xd0\xa2\xdd\xa8\x0a\xde\x09\xbb\x01\x8d\xa5\xba\x62\xf2\x8b\xd2\xec\x34\x82\x54\xb0\x2d\xa4\x28\x0d\x08\x09\x9e\xa9\x0a\xb9\xf6\x6d\x2e\xea\x50\x75\x15\xfd\x1a\x08\x5e\x98\xc1\xab\xd7\xfd\x8f\xd1\x77\x19\xa4\xbe\x19\x45\xe2\xf1\x97\x74\x85\x8e\x7e\xbb\xe9\x7d\xbd\x88\x1a\xae\x68\x5f\x72\x70\x8e\xc7\x5e\x0d\x9a\x13\x5d\xae\x0c\x4a\xe2\x8b\x17\x21\x3b\x0e\xbe\xbb\xa2\x9c\xc3\x15\x51\x9c\x3a\x34\x26\xaa\x42\xea\xff\x8e\xe9\x85\xea\xaa\xf2\x90\xc0\x7c\x84\x2e\x13\x82\x3d\x70\x59\xfc\xa9\x50\xc6\xdf\xc0\x31\x9a\x2c\x0f\x60\xd2\x95\xbb\xc3\x92\x99\x4a\x2f\x7c\x08\x24\x07\xf9\x0d\xc0\x64\x20\xd1\x13\xa4\x49\x1c\x63\xe3\x7d\x28\x03\x33\xd9\x03\x33\x0c\x7c\x2a\x9c\xc3\x2f\xf2\x18\xd0\x30\x12\x20\xe5\xbb\x2f\x87\xa9\xe8\xfe\x3f\x4b\x27\x7f\x40\x58\x43\xa6\x13\xc0\x8a\x8e\xb7\x1d\x83\xb6\x4b\x64\x0c\x2e\x7f\xa9\xed\x41\xcb\xe2\x4f\x05\xf6\xd8\x17\x5c\xca\x74\x8f\xf1\xfb\xa5\xff\x8a\x7b\x10\xfc\x38\x9d\x09\xf4\x38\x88\xe3\xd8\x71\x16\x7b\xc8\xf1\x61\xbf\x87\x1c\x8b\x3f\x15\xb9\x01\x97\x89\x0a\x92\xe5\xa1\x1c\xdd\x1b\x55\x23\x93\x90\x5e\xf8\x80\x50\x72\x7e\x13\x50\x6e\x3c\xf9\x39\x06\xa5\x0f\x7f\x0c\xa5\xa7\x16\x7b\x58\x7a\xf9\xa7\x82\x79\x94\x25\xa5\x9e\xce\x38\xf1\xb3\x88\x28\x3d\x08\x78\x3e\xa1\x09\xf4\xb6\x81\x5d\x1d\x83\xcf\x27\xd2\xe3\x47\x29\x76\x77\x13\x16\xe2\xdb\x89\x6c\xf0\x46\x9f\x0d\x4a\x83\xcd\x7f\x16\xb2\x4a\x33\x58\xad\xba\xf1\x67\x96\x68\xd9\xcc\xc2\x0a\x6c\xfe\xb4\xc1\x36\x1d\xf0\x06\x9b\xdc\x25\xff\x0f\x00\x00\xff\xff\xa3\x1b\x52\x9e\x97\x2a\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 10903, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
